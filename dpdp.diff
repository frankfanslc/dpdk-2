diff --git a/config/common_armv8a_linux b/config/common_armv8a_linux
index 481712ebc..b5aab58fb 100644
--- a/config/common_armv8a_linux
+++ b/config/common_armv8a_linux
@@ -15,7 +15,7 @@ CONFIG_RTE_FORCE_INTRINSICS=y
 # Maximum available cache line size in arm64 implementations.
 # Setting to maximum available cache line size in generic config
 # to address minimum DMA alignment across all arm64 implementations.
-CONFIG_RTE_CACHE_LINE_SIZE=128
+CONFIG_RTE_CACHE_LINE_SIZE=64
 
 CONFIG_RTE_USE_C11_MEM_MODEL=y
 
diff --git a/config/common_base b/config/common_base
index e843a2160..c38197b96 100644
--- a/config/common_base
+++ b/config/common_base
@@ -300,7 +300,7 @@ CONFIG_RTE_LIBRTE_I40E_DEBUG_TX=n
 CONFIG_RTE_LIBRTE_I40E_DEBUG_TX_FREE=n
 CONFIG_RTE_LIBRTE_I40E_RX_ALLOW_BULK_ALLOC=y
 CONFIG_RTE_LIBRTE_I40E_INC_VECTOR=y
-CONFIG_RTE_LIBRTE_I40E_16BYTE_RX_DESC=n
+CONFIG_RTE_LIBRTE_I40E_16BYTE_RX_DESC=y
 CONFIG_RTE_LIBRTE_I40E_QUEUE_NUM_PER_PF=64
 CONFIG_RTE_LIBRTE_I40E_QUEUE_NUM_PER_VM=4
 
@@ -348,7 +348,7 @@ CONFIG_RTE_LIBRTE_MLX4_DEBUG=n
 # Compile burst-oriented Mellanox ConnectX-4, ConnectX-5,
 # ConnectX-6 & Bluefield (MLX5) PMD
 #
-CONFIG_RTE_LIBRTE_MLX5_PMD=n
+CONFIG_RTE_LIBRTE_MLX5_PMD=y
 CONFIG_RTE_LIBRTE_MLX5_DEBUG=n
 
 # Linking method for mlx4/5 dependency on ibverbs and related libraries
diff --git a/drivers/net/i40e/i40e_rxtx_vec_common.h b/drivers/net/i40e/i40e_rxtx_vec_common.h
index 0e6ffa007..72a5161c2 100644
--- a/drivers/net/i40e/i40e_rxtx_vec_common.h
+++ b/drivers/net/i40e/i40e_rxtx_vec_common.h
@@ -73,6 +73,11 @@ reassemble_packets(struct i40e_rx_queue *rxq, struct rte_mbuf **rx_bufs,
 	return pkt_idx;
 }
 
+static inline void my_prefetch_for_store(void *p)
+{
+	asm volatile("prfm pstl1keep, [%0, #0]" : : "r" (p));
+}
+
 static __rte_always_inline int
 i40e_tx_free_bufs(struct i40e_tx_queue *txq)
 {
@@ -82,6 +87,7 @@ i40e_tx_free_bufs(struct i40e_tx_queue *txq)
 	int nb_free = 0;
 	struct rte_mbuf *m, *free[RTE_I40E_TX_MAX_FREE_BUF_SZ];
 
+        rte_prefetch0(txq);
 	/* check DD bits on threshold descriptor */
 	if ((txq->tx_ring[txq->tx_next_dd].cmd_type_offset_bsz &
 			rte_cpu_to_le_64(I40E_TXD_QW1_DTYPE_MASK)) !=
@@ -94,6 +100,15 @@ i40e_tx_free_bufs(struct i40e_tx_queue *txq)
 	  * tx_next_dd - (tx_rs_thresh-1)
 	  */
 	txep = &txq->sw_ring[txq->tx_next_dd - (n - 1)];
+        for (i = 0; i < n; i+=4){
+             rte_prefetch0(&txep[i]);
+        }
+
+	for (i = 0; i < n; i++){
+		my_prefetch_for_store(txep[i].mbuf);
+		my_prefetch_for_store((void *)((unsigned long long)(txep[i].mbuf)+64));
+        }
+
 	m = rte_pktmbuf_prefree_seg(txep[0].mbuf);
 	if (likely(m != NULL)) {
 		free[0] = m;
diff --git a/drivers/net/i40e/i40e_rxtx_vec_neon.c b/drivers/net/i40e/i40e_rxtx_vec_neon.c
index 864eb9a32..81e1fcd8f 100644
--- a/drivers/net/i40e/i40e_rxtx_vec_neon.c
+++ b/drivers/net/i40e/i40e_rxtx_vec_neon.c
@@ -483,12 +483,14 @@ static inline void
 vtx1(volatile struct i40e_tx_desc *txdp,
 		struct rte_mbuf *pkt, uint64_t flags)
 {
-	uint64_t high_qw = (I40E_TX_DESC_DTYPE_DATA |
-			((uint64_t)flags  << I40E_TXD_QW1_CMD_SHIFT) |
-			((uint64_t)pkt->data_len << I40E_TXD_QW1_TX_BUF_SZ_SHIFT));
-
-	uint64x2_t descriptor = {pkt->buf_iova + pkt->data_off, high_qw};
-	vst1q_u64((uint64_t *)txdp, descriptor);
+	//uint64_t high_qw = (I40E_TX_DESC_DTYPE_DATA |
+	//		((uint64_t)flags  << I40E_TXD_QW1_CMD_SHIFT) |
+	//		((uint64_t)pkt->data_len << I40E_TXD_QW1_TX_BUF_SZ_SHIFT));
+
+	//uint64x2_t descriptor = {pkt->buf_iova + pkt->data_off, high_qw};
+	//vst1q_u64((uint64_t *)txdp, descriptor);
+	txdp->buffer_addr = pkt->buf_iova + pkt->data_off;
+	txdp->cmd_type_offset_bsz = I40E_TX_DESC_DTYPE_DATA | (flags  << I40E_TXD_QW1_CMD_SHIFT) | (((uint64_t)pkt->data_len << I40E_TXD_QW1_TX_BUF_SZ_SHIFT));
 }
 
 static inline void
@@ -497,8 +499,13 @@ vtx(volatile struct i40e_tx_desc *txdp,
 {
 	int i;
 
-	for (i = 0; i < nb_pkts; ++i, ++txdp, ++pkt)
-		vtx1(txdp, *pkt, flags);
+	struct rte_mbuf * p_mbuf;
+	for (i = 0; i < nb_pkts; ++i, ++txdp, ++pkt){
+
+	    p_mbuf = *pkt;
+	    txdp->buffer_addr = p_mbuf->buf_iova + p_mbuf->data_off;
+	    txdp->cmd_type_offset_bsz = I40E_TX_DESC_DTYPE_DATA | (flags  << I40E_TXD_QW1_CMD_SHIFT) | (((uint64_t)p_mbuf->data_len << I40E_TXD_QW1_TX_BUF_SZ_SHIFT));
+	}
 }
 
 uint16_t
@@ -518,7 +525,6 @@ i40e_xmit_fixed_burst_vec(void *tx_queue, struct rte_mbuf **tx_pkts,
 
 	if (txq->nb_tx_free < txq->tx_free_thresh)
 		i40e_tx_free_bufs(txq);
-
 	nb_commit = nb_pkts = (uint16_t)RTE_MIN(txq->nb_tx_free, nb_pkts);
 	if (unlikely(nb_pkts == 0))
 		return 0;
@@ -548,11 +554,19 @@ i40e_xmit_fixed_burst_vec(void *tx_queue, struct rte_mbuf **tx_pkts,
 		txep = &txq->sw_ring[tx_id];
 	}
 
+        if(nb_pkts == 0x5555)
+		return 0;
 	tx_backlog_entry(txep, tx_pkts, nb_commit);
+        if(nb_pkts == 0x4444)
+		return 0;
 
 	vtx(txdp, tx_pkts, nb_commit, flags);
+        if(nb_pkts == 0x6666)
+		return 0;
 
 	tx_id = (uint16_t)(tx_id + nb_commit);
+        if(nb_pkts == 0x7777)
+		return 0;
 	if (tx_id > txq->tx_next_rs) {
 		txq->tx_ring[txq->tx_next_rs].cmd_type_offset_bsz |=
 			rte_cpu_to_le_64(((uint64_t)I40E_TX_DESC_CMD_RS) <<
@@ -562,6 +576,8 @@ i40e_xmit_fixed_burst_vec(void *tx_queue, struct rte_mbuf **tx_pkts,
 	}
 
 	txq->tx_tail = tx_id;
+        if(nb_pkts == 0x9999)
+		return 0;
 
 	I40E_PCI_REG_WRITE(txq->qtx_tail, txq->tx_tail);
 
diff --git a/examples/helloworld/main.c b/examples/helloworld/main.c
index c922cfbad..3fcd33d57 100644
--- a/examples/helloworld/main.c
+++ b/examples/helloworld/main.c
@@ -14,6 +14,7 @@
 #include <rte_per_lcore.h>
 #include <rte_lcore.h>
 #include <rte_debug.h>
+#include <rte_mbuf.h>
 
 static int
 lcore_hello(__attribute__((unused)) void *arg)
@@ -21,6 +22,9 @@ lcore_hello(__attribute__((unused)) void *arg)
 	unsigned lcore_id;
 	lcore_id = rte_lcore_id();
 	printf("hello from core %u\n", lcore_id);
+        struct rte_mbuf pkt;
+	printf("\n%ld\n",(uint64_t)&pkt.timestamp - (uint64_t)&pkt);
+
 	return 0;
 }
 
diff --git a/examples/l3fwd/main.c b/examples/l3fwd/main.c
index 4dea12a65..16eb22dd7 100644
--- a/examples/l3fwd/main.c
+++ b/examples/l3fwd/main.c
@@ -50,8 +50,8 @@
 /*
  * Configurable number of RX/TX ring descriptors
  */
-#define RTE_TEST_RX_DESC_DEFAULT 1024
-#define RTE_TEST_TX_DESC_DEFAULT 1024
+#define RTE_TEST_RX_DESC_DEFAULT 2048
+#define RTE_TEST_TX_DESC_DEFAULT 2048
 
 #define MAX_TX_QUEUE_PER_PORT RTE_MAX_ETHPORTS
 #define MAX_RX_QUEUE_PER_PORT 128
diff --git a/lib/librte_eal/common/include/rte_common.h b/lib/librte_eal/common/include/rte_common.h
index 05a3a6401..b00537fff 100644
--- a/lib/librte_eal/common/include/rte_common.h
+++ b/lib/librte_eal/common/include/rte_common.h
@@ -426,7 +426,7 @@ rte_align64prevpow2(uint64_t v)
 }
 
 /*********** Macros for calculating min and max **********/
-
+#if 0
 /**
  * Macro to return the minimum of two numbers
  */
@@ -447,6 +447,9 @@ rte_align64prevpow2(uint64_t v)
 		_a > _b ? _a : _b; \
 	})
 
+#endif
+#define RTE_MAX(a,b) ((a) > (b) ? (a) : (b))
+#define RTE_MIN(a,b) ((a) < (b) ? (a) : (b))
 /*********** Other general functions / macros ********/
 
 /**
